#################################################
# DO Community Playbooks: Initial Server Setup
#################################################
---
- hosts: all
  become: true
  vars_files:
    - vars/default.yml

  tasks:
    - name: Install Prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

    # Sudo Group Setup
    - name: Make sure we have a 'sudo' group
      group:
        name: sudo
        state: present

    - name: Allow 'sudo' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: "^%sudo"
        line: "%sudo ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: "/usr/sbin/visudo -cf %s"

    # User + Key Setup
    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ create_user }}"
        state: present
        groups: sudo
        append: true
        create_home: true
        shell: /bin/bash

    - name: Execute rsync command so new user has the same authorized keys as root
      ansible.posix.synchronize:
        src: /root/.ssh
        dest: /home/{{ create_user }}
      delegate_to: "{{ inventory_hostname }}"

    - name: Change .ssh file permission
      ansible.builtin.file:
        path: /home/{{ create_user }}/.ssh
        state: directory
        recurse: yes
        owner: "{{ create_user }}"
        group: "{{ create_user }}"

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ create_user }}"
        state: present
        key: "{{ copy_local_key }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: "^#?PermitRootLogin"
        line: "PermitRootLogin prohibit-password"

    # Install Packages
    - name: Update apt
      apt: update_cache=yes

    - name: Install required system packages
      apt: name={{ sys_packages }} state=latest

    # Safe upgrade
    - name: Safe upgrade
      apt: upgrade=safe

    # UFW Setup
    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming
